{"version":3,"sources":["http-common.js","services/upload-files.service.js","components/upload-files.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","file","onUploadProgress","formData","FormData","append","http","post","get","UploadFiles","props","selectFiles","bind","upload","uploadFiles","state","selectedFiles","undefined","progressInfos","message","fileInfos","UploadService","getFiles","then","response","setState","data","event","this","target","files","idx","_progressInfos","percentage","Math","round","loaded","total","prev","name","catch","nextMessage","i","length","push","fileName","map","progressInfo","index","className","key","role","aria-valuenow","aria-valuemin","aria-valuemax","style","width","type","multiple","onChange","disabled","onClick","item","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.a4ffc7a2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  //baseURL: \"http://localhost:8080\",\n  baseURL: \"/\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.post(\"/api/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n\n  getFiles() {\n    return http.get(\"/api/files\");\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from \"react\";\nimport UploadService from \"../services/upload-files.service\";\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFiles = this.selectFiles.bind(this);\n    this.upload = this.upload.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      progressInfos: [],\n      message: [],\n\n      fileInfos: [],\n    };\n  }\n\n  componentDidMount() {\n    UploadService.getFiles().then((response) => {\n      this.setState({\n        fileInfos: response.data,\n      });\n    });\n  }\n\n  selectFiles(event) {\n    this.setState({\n      progressInfos: [],\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload(idx, file) {\n    let _progressInfos = [...this.state.progressInfos];\n\n    UploadService.upload(file, (event) => {\n      _progressInfos[idx].percentage = Math.round((100 * event.loaded) / event.total);\n      this.setState({\n        _progressInfos,\n      });\n    })\n      .then((response) => {\n        this.setState((prev) => {\n          let nextMessage = [...prev.message, \"Uploaded the file successfully: \" + file.name];\n          return {\n            message: nextMessage\n          };\n        });\n\n        return UploadService.getFiles();\n      })\n      .then((files) => {\n        this.setState({\n          fileInfos: files.data,\n        });\n      })\n      .catch(() => {\n        _progressInfos[idx].percentage = 0;\n        this.setState((prev) => {\n          let nextMessage = [...prev.message, \"Could not upload the file: \" + file.name];\n          return {\n            progressInfos: _progressInfos,\n            message: nextMessage\n          };\n        });\n      });\n  }\n\n  uploadFiles() {\n    const selectedFiles = this.state.selectedFiles;\n\n    let _progressInfos = [];\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      _progressInfos.push({ percentage: 0, fileName: selectedFiles[i].name });\n    }\n\n    this.setState(\n      {\n        progressInfos: _progressInfos,\n        message: [],\n      },\n      () => {\n        for (let i = 0; i < selectedFiles.length; i++) {\n          this.upload(i, selectedFiles[i]);\n        }\n      }\n    );\n  }\n\n  render() {\n    const { selectedFiles, progressInfos, message, fileInfos } = this.state;\n\n    return (\n      <div>\n        {progressInfos &&\n          progressInfos.map((progressInfo, index) => (\n            <div className=\"mb-2\" key={index}>\n              <span>{progressInfo.fileName}</span>\n              <div className=\"progress\">\n                <div\n                  className=\"progress-bar progress-bar-info\"\n                  role=\"progressbar\"\n                  aria-valuenow={progressInfo.percentage}\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  style={{ width: progressInfo.percentage + \"%\" }}\n                >\n                  {progressInfo.percentage}%\n                </div>\n              </div>\n            </div>\n          ))}\n\n        <div className=\"row my-3\">\n          <div className=\"col-8\">\n            <label className=\"btn btn-default p-0\">\n              <input type=\"file\" multiple onChange={this.selectFiles} />\n            </label>\n          </div>\n\n          <div className=\"col-4\">\n            <button\n              className=\"btn btn-success btn-sm\"\n              disabled={!selectedFiles}\n              onClick={this.uploadFiles}\n            >\n              Upload\n            </button>\n          </div>\n        </div>\n\n        {message.length > 0 && (\n          <div className=\"alert alert-secondary\" role=\"alert\">\n            <ul>\n              {message.map((item, i) => {\n                return <li key={i}>{item}</li>;\n              })}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"card\">\n          <div className=\"card-header\">List of Files</div>\n          <ul className=\"list-group list-group-flush\">\n            {fileInfos &&\n              fileInfos.map((file, index) => (\n                <li className=\"list-group-item\" key={index}>\n                  <a href={'/api/files/' + file.name}>{file.name}</a>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport UploadFiles from \"./components/upload-files.component\";\n\nfunction App() {\n  return (\n    <div className=\"container\" style={{ width: \"600px\" }}>\n      <div className=\"my-2\">\n        <h3>bezkoder.com</h3>\n        <h4>React upload multiple Files</h4>\n      </div>\n\n      <UploadFiles />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}